services:
  app:
    build:
      dockerfile: ./Dockerfile
      context: ./
    profiles: [ "prod" ]
    container_name: app_container
    environment:
      CONFIG__MODE: PROD
      CONFIG__DB__NAME: ${PROD_DB_NAME}
      CONFIG__DB__PASSWORD: ${PROD_DB_PASSWORD}
      CONFIG__DB__USER: ${PROD_DB_USER}
      CONFIG__DB__HOST: pg
      CONFIG__DB__PORT: ${PROD_DB_PORT}
      CONFIG__DB__DRIVER: ${PROD_DB_DRIVER}

      CONFIG__DB__ECHO: ${PROD_DB_ECHO}
      CONFIG__DB__ECHO_POOL: ${PROD_DB_ECHO_POOL}
      CONFIG__DB__POOL_SIZE: ${PROD_DB_POOL_SIZE}
      CONFIG__DB__MAX_OVERFLOW: ${PROD_DB_MAX_OVERFLOW}

      CONFIG__GUNICORN__HOST: ${CONFIG__GUNICORN__HOST}
      CONFIG__GUNICORN__PORT: ${CONFIG__GUNICORN__PORT}
      CONFIG__GUNICORN__WORKERS: ${CONFIG__GUNICORN__WORKERS}
      CONFIG__GUNICORN__TIMEOUT: ${CONFIG__GUNICORN__TIMEOUT}

      CONFIG__LOGGING__LEVEL: INFO
    ports:
      - "${CONFIG__GUNICORN__PORT}:8000"
    depends_on:
      pg:
        condition: service_healthy

  pg:
    image: postgres:16
    profiles: [ "prod" ]
    container_name: pg_container
    environment:
      POSTGRES_DB: ${PROD_DB_NAME}
      POSTGRES_USER: ${PROD_DB_USER}
      POSTGRES_PASSWORD: ${PROD_DB_PASSWORD}
    ports:
      - ${PROD_DB_PORT}:5432
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 3s
      timeout: 3s
      retries: 3

  pg_test:
    image: postgres:16
    profiles: [ "test" ]
    container_name: test_pg_container
    environment:
      POSTGRES_DB: ${CONFIG__TEST__DB__NAME}
      POSTGRES_USER: ${CONFIG__TEST__DB__USER}
      POSTGRES_PASSWORD: ${CONFIG__TEST__DB__PASSWORD}
    ports:
      - ${CONFIG__TEST__DB__PORT}:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 3s
      timeout: 3s
      retries: 3

volumes:
  pg_data:
